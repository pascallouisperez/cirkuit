package cirkuit.properties;import java.util.*;import java.awt.*;import javax.swing.*;import javax.swing.event.*;import java.awt.event.*;import javax.swing.border.*;import java.io.File;import cirkuit.circuit.Circuit;import cirkuit.util.PreviewPanel;import cirkuit.texts.GUITexts;/** * This class allows the user to modify the Properties via a gui. * @author Sven Gowal (sven.gowal@lha.ch) * @author Pascal Perez (pascal.perez@lha.ch) * * TODO : tryied to add an autoResize option so that a circuit bigger * than the screen would be resized to screen size but it is difficult (boring) * to make it compatible with an online gaming (maybe this should only be available * in local games) */public class PropertiesDialog extends JDialog implements ActionListener, ChangeListener {    private Properties properties = null;        private String currentPath = ".";    private int minPlayer = 1;    private int maxPlayer = 8;        private JSpinner gridSpinner, plusSpeedSpinner, minusSpeedSpinner, maxAngleSpinner, numPlayerSpinner, turnSpinner, traceSpinner;    private JTextField circuitFileNameField, nickField, portField, ipField, localPortField;    private JButton inColorButton, outColorButton, startColorButton;    private JTextField[] playerNameField = new JTextField[maxPlayer];    private JComboBox[] playerClassBox = new JComboBox[maxPlayer];    private JButton[] playerColorButton = new JButton[maxPlayer];    private JButton onlineColorButton;    private JCheckBox redDotsCheck, isCrashCheck, isRallyMode /*, autoResize */;        // for the preview    private PreviewPanel previewPanel = new PreviewPanel(200, 125);    private Circuit circuit           = new Circuit();        // is the rally mode selected ? last state value    private boolean isRallyModeSelectedLast = true;         public PropertiesDialog(Frame owner, Properties properties) {        super(owner, GUITexts.TITLE_GAMEPROPERTIES, true);        this.properties = properties;        setLocation((int)owner.getLocation().getX()+20, (int)owner.getLocation().getY()+20);                Container content = this.getContentPane();        content.setLayout(new BorderLayout());                JTabbedPane jtp = new JTabbedPane();        JPanel panel, tmp, tmp1;        JButton button;        Dimension size;                panel = new JPanel(new BorderLayout());        jtp.add(panel, GUITexts.TITLE_PLAYERS);        size = new Dimension(100,20);        panel.add(tmp = new JPanel(new GridLayout(1,2)), BorderLayout.NORTH);        tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.LEFT)));        tmp1.add(new JLabel(GUITexts.INFO_NPLAYERS+GUITexts.MISC_ENDING));        tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.CENTER)));        int numPlayer = properties.getPlayerClass().size();        tmp1.add(numPlayerSpinner = new JSpinner(new SpinnerNumberModel(new Integer(numPlayer),new Integer(minPlayer),new Integer(maxPlayer),new Integer(1))));        numPlayerSpinner.setMaximumSize(size);        numPlayerSpinner.setMinimumSize(size);        numPlayerSpinner.setPreferredSize(size);        numPlayerSpinner.addChangeListener(this);        panel.add(tmp = new JPanel(new GridLayout(maxPlayer+1,3)), BorderLayout.CENTER);        tmp.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), GUITexts.TITLE_COLORS));        tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.LEFT)));        tmp1.add(new JLabel(GUITexts.INFO_NAME+GUITexts.MISC_ENDING));        tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.CENTER)));        tmp1.add(new JLabel(GUITexts.INFO_TYPEOFPLAYER+GUITexts.MISC_ENDING));        tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.RIGHT)));        tmp1.add(new JLabel(GUITexts.INFO_COLOR+GUITexts.MISC_ENDING));        Vector tab = getPlayerList();        for (int i=0; i<maxPlayer; i++) {            tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.LEFT)));            tmp1.add(playerNameField[i] = new JTextField());            playerNameField[i].setMaximumSize(size);            playerNameField[i].setMinimumSize(size);            playerNameField[i].setPreferredSize(size);            tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.CENTER)));            tmp1.add(playerClassBox[i] = new JComboBox(tab));            playerClassBox[i].setMaximumSize(size);            playerClassBox[i].setMinimumSize(size);            playerClassBox[i].setPreferredSize(size);            tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.RIGHT)));            tmp1.add(playerColorButton[i] = new JButton());            playerColorButton[i].setMaximumSize(size);            playerColorButton[i].setMinimumSize(size);            playerColorButton[i].setPreferredSize(size);            playerColorButton[i].addActionListener(this);            playerColorButton[i].setActionCommand("color");            playerColorButton[i].setBackground(Color.green);        }        int cnt = 0;        String playerName;        for (Enumeration e = properties.getPlayerClass().keys(); e.hasMoreElements();) {            playerName = (String)e.nextElement();            playerNameField[cnt].setText(playerName);            playerClassBox[cnt].setSelectedItem((String)properties.getPlayerClass().get(playerName));            playerColorButton[cnt].setBackground((Color)properties.getPlayerColor().get(playerName));            cnt++;        }        setVisibility(cnt);                panel = new JPanel(new BorderLayout());        jtp.add(panel, GUITexts.TITLE_CIRCUIT);        size = new Dimension(100,20);        panel.add(tmp = new JPanel(new GridLayout(1,3)), BorderLayout.NORTH);        tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.LEFT)));        tmp1.add(new JLabel(GUITexts.INFO_CIRCUITFILEPATH+GUITexts.MISC_ENDING));        tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.CENTER)));        tmp1.add(circuitFileNameField = new JTextField());        circuitFileNameField.setMaximumSize(size);        circuitFileNameField.setMinimumSize(size);        circuitFileNameField.setPreferredSize(size);        circuitFileNameField.setText(properties.getCircuitFileName());        tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.RIGHT)));        tmp1.add(button = new JButton(GUITexts.INFO_BROWSE));        button.addActionListener(this);        button.setActionCommand("browse");                // preview        circuit.load(properties.getCircuitFileName());        circuit.setInnerColor(properties.getInColor());        circuit.setOuterColor(properties.getOutColor());        circuit.setStartingLineColor(properties.getStartColor());        previewPanel.setCircuit(circuit);        panel.add(tmp = new JPanel(new BorderLayout()));        tmp.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), GUITexts.TITLE_PREVIEW));        tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.CENTER)), BorderLayout.CENTER);        tmp1.setBackground(Color.WHITE);        tmp1.add(previewPanel);                // circuit colors        panel.add(tmp = new JPanel(new GridLayout(3,2)), BorderLayout.SOUTH);        tmp.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), GUITexts.TITLE_COLORS));        tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.LEFT)));        tmp1.add(new JLabel(GUITexts.INFO_INSIDECOLOR+GUITexts.MISC_ENDING));        tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.CENTER)));        tmp1.add(inColorButton = new JButton());        inColorButton.setMaximumSize(size);        inColorButton.setMinimumSize(size);        inColorButton.setPreferredSize(size);        inColorButton.setBackground(properties.getInColor());        inColorButton.setActionCommand("color");        inColorButton.addActionListener(this);        tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.LEFT)));        tmp1.add(new JLabel(GUITexts.INFO_OUTSIDECOLOR+GUITexts.MISC_ENDING));        tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.CENTER)));        tmp1.add(outColorButton = new JButton());        outColorButton.setMaximumSize(size);        outColorButton.setMinimumSize(size);        outColorButton.setPreferredSize(size);        outColorButton.setBackground(properties.getOutColor());        outColorButton.setActionCommand("color");        outColorButton.addActionListener(this);        tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.LEFT)));        tmp1.add(new JLabel(GUITexts.INFO_STARTINGLINECOLOR+GUITexts.MISC_ENDING));        tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.CENTER)));        tmp1.add(startColorButton = new JButton());        startColorButton.setMaximumSize(size);        startColorButton.setMinimumSize(size);        startColorButton.setPreferredSize(size);        startColorButton.setBackground(properties.getStartColor());        startColorButton.setActionCommand("color");        startColorButton.addActionListener(this);                // cars & others        panel = new JPanel(new GridLayout(2, 1));        jtp.add(panel, GUITexts.TITLE_CARSANDOTHERS);        size = new Dimension(100,25);                // cars        panel.add(tmp = new JPanel(new GridLayout(4,2)));        tmp.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Cars"));        tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.LEFT)));        tmp1.add(new JLabel(GUITexts.INFO_HIGHESTDECCELERATION+GUITexts.MISC_ENDING));        tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.CENTER)));        tmp1.add(minusSpeedSpinner = new JSpinner(new SpinnerNumberModel(new Integer(properties.getMinusSpeed()),new Integer(1),new Integer(10),new Integer(1))));        minusSpeedSpinner.setMaximumSize(size);        minusSpeedSpinner.setMinimumSize(size);        minusSpeedSpinner.setPreferredSize(size);        tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.LEFT)));        tmp1.add(new JLabel(GUITexts.INFO_HIGHESTACCELERATION+GUITexts.MISC_ENDING));        tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.CENTER)));        tmp1.add(plusSpeedSpinner = new JSpinner(new SpinnerNumberModel(new Integer(properties.getPlusSpeed()),new Integer(1),new Integer(10),new Integer(1))));        plusSpeedSpinner.setMaximumSize(size);        plusSpeedSpinner.setMinimumSize(size);        plusSpeedSpinner.setPreferredSize(size);        tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.LEFT)));        tmp1.add(new JLabel(GUITexts.INFO_HIGHESTTURNINGANGLE+GUITexts.MISC_ENDING));        tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.CENTER)));        tmp1.add(maxAngleSpinner = new JSpinner(new SpinnerNumberModel(new Integer((int)Math.toDegrees(properties.getMaxAngle())), new Integer(10), new Integer(120), new Integer(1))));        maxAngleSpinner.setMaximumSize(size);        maxAngleSpinner.setMinimumSize(size);        maxAngleSpinner.setPreferredSize(size);        tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.LEFT)));        tmp1.add(new JLabel(GUITexts.INFO_LENGTHOFTRACE+GUITexts.MISC_ENDING));        tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.CENTER)));        tmp1.add(traceSpinner = new JSpinner(new SpinnerNumberModel(new Integer(properties.getTrace()),new Integer(0),new Integer(20),new Integer(1))));        traceSpinner.setMaximumSize(size);        traceSpinner.setMinimumSize(size);        traceSpinner.setPreferredSize(size);                // others        panel.add(tmp = new JPanel(new GridLayout(5,2)));        tmp.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), GUITexts.TITLE_OTHERS));        tmp.add(new JLabel(GUITexts.INFO_GRIDSIZE+GUITexts.MISC_ENDING));        tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.CENTER)));        tmp1.add(gridSpinner = new JSpinner(new SpinnerNumberModel(new Integer(properties.getGrid()),new Integer(5),new Integer(30),new Integer(1))));        gridSpinner.setMaximumSize(size);        gridSpinner.setMinimumSize(size);        gridSpinner.setPreferredSize(size);        tmp.add(new JLabel(GUITexts.INFO_NLAPS+GUITexts.MISC_ENDING));        tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.CENTER)));        tmp1.add(turnSpinner = new JSpinner(new SpinnerNumberModel(new Integer(properties.getTurn()),new Integer(1),new Integer(10),new Integer(1))));        turnSpinner.setMaximumSize(size);        turnSpinner.setMinimumSize(size);        turnSpinner.setPreferredSize(size);        tmp.add(new JLabel(GUITexts.INFO_ENABLEDOTSHINT+GUITexts.MISC_ENDING));        tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.CENTER)));        tmp1.add(redDotsCheck = new JCheckBox("", properties.getRedDots()));        tmp.add(new JLabel(GUITexts.INFO_ENABLECRASH+GUITexts.MISC_ENDING));        tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.CENTER)));        tmp1.add(isCrashCheck = new JCheckBox("", properties.getIsCrash()));        tmp.add(new JLabel(GUITexts.INFO_RALLYMODE+GUITexts.MISC_ENDING));        tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.CENTER)));        tmp1.add(isRallyMode = new JCheckBox("", properties.getIsRallyMode()));        isRallyModeSelectedLast = properties.getIsRallyMode();        isRallyMode.addChangeListener(new ChangeListener() {            public void stateChanged(ChangeEvent e) {                if (isRallyMode.isSelected() != isRallyModeSelectedLast) {                    isRallyModeSelectedLast = isRallyMode.isSelected();                    int i = ((Integer)maxAngleSpinner.getValue()).intValue();                    if(isRallyMode.isSelected()) {                        maxAngleSpinner.setValue(new Integer(Math.min(i << 1, ((Integer)(((SpinnerNumberModel)maxAngleSpinner.getModel()).getMaximum())).intValue()))); // x*2                    } else {                        maxAngleSpinner.setValue(new Integer(Math.max(i >> 1, ((Integer)(((SpinnerNumberModel)maxAngleSpinner.getModel()).getMinimum())).intValue()))); // x/2                    }                }            }        });        /* tmp.add(new JLabel(GUITexts.INFO_AUTORESIZE+GUITexts.MISC_ENDING));        tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.CENTER)));        tmp1.add(autoResize = new JCheckBox("", properties.getAutoResize())); */                // online        panel = new JPanel(new GridLayout(2, 1));        jtp.add(panel, GUITexts.TITLE_ONLINE);        size = new Dimension(100,20);                panel.add(tmp = new JPanel(new GridLayout(4,2)));        tmp.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), GUITexts.TITLE_NTWCLIENT));        tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.LEFT)));        tmp1.add(new JLabel(GUITexts.INFO_NICKNAME+GUITexts.MISC_ENDING));        tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.CENTER)));        tmp1.add(nickField = new JTextField());        nickField.setText(properties.getNickname());        nickField.setMaximumSize(size);        nickField.setMinimumSize(size);        nickField.setPreferredSize(size);        tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.LEFT)));        tmp1.add(new JLabel(GUITexts.INFO_COLOR+GUITexts.MISC_ENDING));        tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.CENTER)));        tmp1.add(onlineColorButton = new JButton());        onlineColorButton.setMaximumSize(size);        onlineColorButton.setMinimumSize(size);        onlineColorButton.setPreferredSize(size);        onlineColorButton.setActionCommand("color");        onlineColorButton.setBackground(properties.getOnlineColor());        onlineColorButton.addActionListener(this);        tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.LEFT)));        tmp1.add(new JLabel(GUITexts.INFO_SERVERIP+GUITexts.MISC_ENDING));        tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.CENTER)));        tmp1.add(ipField = new JTextField());        ipField.setText(properties.getServerIP());        ipField.setMaximumSize(size);        ipField.setMinimumSize(size);        ipField.setPreferredSize(size);        tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.LEFT)));        tmp1.add(new JLabel(GUITexts.INFO_SERVERPORT+GUITexts.MISC_ENDING));        tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.CENTER)));        tmp1.add(portField = new JTextField());        portField.setText(""+properties.getServerPort());        portField.setMaximumSize(size);        portField.setMinimumSize(size);        portField.setPreferredSize(size);                panel.add(tmp = new JPanel(new GridLayout(1,2)));        tmp.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), GUITexts.TITLE_NTWSERVER));        tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.LEFT)));        tmp1.add(new JLabel(GUITexts.INFO_LOCALPORT+GUITexts.MISC_ENDING));        tmp.add(tmp1 = new JPanel(new FlowLayout(FlowLayout.CENTER)));        tmp1.add(localPortField = new JTextField());        localPortField.setText(""+properties.getLocalPort());        localPortField.setMaximumSize(size);        localPortField.setMinimumSize(size);        localPortField.setPreferredSize(size);                content.add(jtp, BorderLayout.CENTER);                JPanel bottom = new JPanel(new FlowLayout(FlowLayout.CENTER,20,5));        //bottom.setBorder(new CompoundBorder(new LineBorder(Color.black,1), new BevelBorder(BevelBorder.RAISED)));        size = new Dimension(110,25);        bottom.add(button = new JButton(GUITexts.BUTTON_OK));        button.setPreferredSize(size);        button.setActionCommand("ok");        button.addActionListener(this);        bottom.add(button = new JButton(GUITexts.BUTTON_CANCEL));        button.setPreferredSize(size);        button.setActionCommand("cancel");        button.addActionListener(this);        content.add(bottom, BorderLayout.SOUTH);                pack();    }        /** Sets the Properties */    private void setProps() {        properties.setGrid(((Integer)gridSpinner.getValue()).intValue());        properties.setTurn(((Integer)turnSpinner.getValue()).intValue());        properties.setRedDots(redDotsCheck.isSelected());        properties.setIsCrash(isCrashCheck.isSelected());        /* properties.setAutoResize(autoResize.isSelected()); */        properties.setIsRallyMode(isRallyMode.isSelected());                properties.setPlusSpeed(((Integer)plusSpeedSpinner.getValue()).intValue());        properties.setTrace(((Integer)traceSpinner.getValue()).intValue());        properties.setMinusSpeed(((Integer)minusSpeedSpinner.getValue()).intValue());        properties.setMaxAngle(Math.toRadians((double)((Integer)maxAngleSpinner.getValue()).intValue()));                        properties.setCircuitFileName(circuitFileNameField.getText());        properties.setInColor(inColorButton.getBackground());        properties.setOutColor(outColorButton.getBackground());        properties.setStartColor(startColorButton.getBackground());                int num = ((Integer)numPlayerSpinner.getValue()).intValue();        properties.getPlayerClass().clear();        properties.getPlayerColor().clear();        for (int i=0; i<num; i++) {            if (!playerNameField[i].getText().equals("")) {                properties.getPlayerColor().put(playerNameField[i].getText(),playerColorButton[i].getBackground());                properties.getPlayerClass().put(playerNameField[i].getText(),(String)playerClassBox[i].getSelectedItem());            }        }                properties.setLocalPort(Integer.parseInt(localPortField.getText()));        properties.setServerPort(Integer.parseInt(portField.getText()));        properties.setServerIP(ipField.getText());        properties.setNickname(nickField.getText());        properties.setOnlineColor(onlineColorButton.getBackground());    }        /** Action Listener */    public void actionPerformed(ActionEvent e) {        String com = e.getActionCommand();        if (com.equals("ok")) {            setProps();            dispose();        } else if (com.equals("cancel")) {            dispose();        } else if (com.equals("browse")) {            circuitFileNameField.setText(showBrowseDialog("Select a circuit file","Open","selects the specified bckt file",'O',circuitFileNameField.getText()));            circuit.load(circuitFileNameField.getText());            previewPanel.setCircuit(circuit);            previewPanel.repaint();        } else if (com.equals("color")) {            Color tmpColor;            tmpColor = JColorChooser.showDialog(null,"Choose a color",((JButton)e.getSource()).getBackground());            ((JButton)e.getSource()).setBackground(getColor(((JButton)e.getSource()).getBackground(),tmpColor));            circuit.setInnerColor(inColorButton.getBackground());            circuit.setOuterColor(outColorButton.getBackground());            circuit.setStartingLineColor(startColorButton.getBackground());            previewPanel.repaint();        }    }        /** Change Listener */    public void stateChanged(ChangeEvent e) {        setVisibility(((Integer)numPlayerSpinner.getValue()).intValue());    }        /** Sets the good visibility */    public void setVisibility(int index) {        for (int i=minPlayer; i<maxPlayer; i++) {            boolean b = (i<index);            playerNameField[i].setVisible(b);            playerClassBox[i].setVisible(b);            playerColorButton[i].setVisible(b);        }    }        /** @return x if y==null else y */    private Color getColor(Color x, Color y) {        return (y==null)?x:y;    }        /** Shows a FileChooser */    private String showBrowseDialog(String title, String buttonText, String tooltip, char approveChar, String oldFile) {        JFileChooser files = new JFileChooser((new File(properties.getCircuitFileName())).getParent());        files.setDialogTitle(title);        files.setApproveButtonText(buttonText);        files.setApproveButtonToolTipText(tooltip);        files.setApproveButtonMnemonic(approveChar);        files.setFileSelectionMode(JFileChooser.FILES_ONLY);        files.setMultiSelectionEnabled(false);        files.rescanCurrentDirectory();        files.setFileFilter(new javax.swing.filechooser.FileFilter() {            public boolean accept(File f) {                if (f.isDirectory() || (f.isFile() && f.getPath().endsWith(".ckt"))) {                    return true;                }                return false;            }            public String getDescription() {                return "ckt files";            }        } );        int result = files.showDialog(this, null);        File file = (result == files.APPROVE_OPTION)? files.getSelectedFile() : null;        if (file != null) {            currentPath = file.getAbsolutePath().substring(0,file.getAbsolutePath().lastIndexOf(File.separator));            return file.getAbsolutePath();        } else            return oldFile;    }        /** Gets all the Player classes available */    Vector getPlayerList() {        Vector playerList = new Vector();        playerList.add("HumanPlayer");        playerList.add("ComputerPlayer");        return playerList;     }}